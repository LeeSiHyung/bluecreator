<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xsi:schemaLocation="http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd">

		
	<!-- 코드의 애노테이션을 이용해서 부가적인 빈 설정 또는 초기화 작업을 해주는 후처리기를 등록 -->
	<!-- <context:annotation-config/> -->
		
	<!-- 트랜잭션 애노테이션을 사용하기 위한 태그 -->
	<tx:annotation-driven/>
			
	<!-- MariaDB 설정 -->			
	<bean id="dataSource" class="org.springframework.jdbc.datasource.SimpleDriverDataSource">
		<property name="driverClass" value="org.mariadb.jdbc.Driver" />
		<property name="url" value="jdbc:mariadb://ec2-52-78-240-50.ap-northeast-2.compute.amazonaws.com:3306/toby?characterEncoding=UTF-8" />
		<property name="username" value="toby" />
		<property name="password" value="123qwe!@" />
	</bean>

	<!-- 오라클DB 설정 -->	
	<!-- <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver" />
		<property name="url" value="jdbc:oracle:thin:@211.237.24.135:1521:OTTR" />
		<property name="username" value="toby" />
		<property name="password" value="123qwe!@" />
	</bean> -->

	
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
	</bean>
	
	<bean id="userDao" class="springbook.dao.UserDaoJdbc">
		<property name="dataSource" ref="dataSource" />
		<!-- <property name="sqlAdd" value="insert into users(user_id, user_name, user_password, user_email, user_level, login, recommend) values(?,?,?,?,?,?,?)"></property> -->
		<property name="sqlService" ref="sqlService" />
	</bean>
	
	<!-- <bean id="sqlService" class="springbook.service.SimpleSqlService">
		<property name="sqlMap">
			<map>
				<entry key="userDeleteAll" value="delete from users"/>
				<entry key="userAdd" value="insert into users(user_id, user_name, user_password, user_email, user_level, login, recommend) values(?,?,?,?,?,?,?)"/>
				<entry key="userGet" value="select * from users where user_id = ?"/>
				<entry key="usetGetCount" value="select count(*) from users"/>
				<entry key="userGetAll" value="select * from users order by user_id"/>
				<entry key="userUpdate" value="update users set user_name = ?, user_password = ?, user_email = ?, user_level = ?, login = ?, recommend = ? where user_id = ?"/>
			</map>
		</property>
	</bean> -->
	
	<!-- <bean id="sqlService" class="springbook.service.sql.XmlSqlService">
		<property name="sqlReader" ref="sqlService"/>
		<property name="sqlRegistry" ref="sqlService"/>
	
		XmlSqlService.class.getResourceAsStream을 기준으로 파일을 찾음
		<property name="sqlmapFile" value="sqlmap.xml"/>
	</bean> -->
	
	<!-- <bean id="sqlService" class="springbook.service.sql.BaseSqlService">
		<property name="sqlReader" ref="sqlReader"/>
		<property name="sqlRegistry" ref="sqlRegistry"/>
	</bean>
	 -->
	 
	<!-- <bean id="sqlService" class="springbook.service.sql.DefaultSqlService">
	</bean> -->
	
	<bean id="sqlService" class="springbook.service.sql.OxmSqlService">
		<property name="unmarshaller" ref="unmarshaller"/>
		<!-- <property name="sqlmap" value="classpath:springbook/service/sql/sqlmap.xml"/> -->
		<!-- <property name="sqlmap" value="file:/C:/Users/master/git/bluecreator/toby/src/main/java/springbook/service/sql/sqlmap.xml"/> -->
		<property name="sqlRegistry" ref="sqlRegistry"/>
	</bean>
	
	<bean id="sqlRegistry" class="springbook.service.sql.EmbeddedDbSqlRegistry">
		<property name="dataSource" ref="embeddedDatabase"/>
	</bean>
	
	<bean id="unmarshaller" class="org.springframework.oxm.jaxb.Jaxb2Marshaller">
		<property name="contextPath" value="springbook.jaxb"/>
	</bean>
	
	<!-- <bean id="sqlReader" class="springbook.service.sql.JaxbXmlSqlReader">
		<property name="sqlmapFile" value="sqlmap.xml" />
	</bean>
	
	<bean id="sqlRegistry" class="springbook.service.sql.HashMapSqlRegitry">
	</bean> -->
	
	<bean id="mailSender" class="springbook.service.DummyMailSender"/>
	
	<!-- 포인트 컷 등록 -->
	<!-- 	
	<bean id="transactionPointcut" class="org.springframework.aop.support.NameMatchMethodPointcut">
		<property name="mappedName" value ="upgrade*"/>
	</bean> -->
	
	<!-- 	
	<bean id="transactionPointcut" class="springbook.service.NameMatchClassMethodPointcut">
		<property name="mappedClassName" value="*ServiceImpl"/>
		<property name="mappedName" value="upgrade*"/>
	</bean> -->
	
<!-- 	<bean id="transactionPointcut" class="org.springframework.aop.aspectj.AspectJExpressionPointcut">
		<property name="expression" value="execution(* *..*ServiceImpl.upgrade*(..))"/>
	</bean>
	
	어드바이저 등록
	<bean id="transactionAdvisor" class="org.springframework.aop.support.DefaultPointcutAdvisor">
		<property name="advice" ref="transactionAdvice" />
		<property name="pointcut" ref="transactionPointcut" />
	</bean> -->
	
	<!-- 
	<aop:config>
		<aop:pointcut id="transactionPointcut" expression="execution(* *..*ServiceImpl.upgrade*(..))" />
		<aop:advisor advice-ref="transactionAdvice" pointcut-ref="transactionPointcut"/>
	</aop:config>
	
	<aop:config>
		<aop:advisor advice-ref="transactionAdvice" pointcut="execution(* *..*ServiceImpl.upgrade*(..))"/>
	</aop:config> -->

	<!-- 어드바이스 등록 -->
	<!-- 
	<bean id="transactionAdvice" class="springbook.service.TransactionAdvice">
		<property name="transactionManager" ref="transactionManager" />
	</bean> -->
	
	<!-- 	
	<bean id="transactionAdvice" class="org.springframework.transaction.interceptor.TransactionInterceptor">
		<property name="transactionManager" ref="transactionManager" />
		<property name="transactionAttributes">
			<props>
				<prop key="get*">PROPAGATION_REQUIRED,readOnly,timeout_30</prop>
				<prop key="update*">PROPAGATION_REQUIRES_NEW,ISOLATION_SERIALIZABLE</prop>
				<prop key="*">PROPAGATION_REQUIRED</prop>
			</props>		
		</property>
	</bean> -->
	
	<!-- 
	<bean id="transactionAdvice" class="org.springframework.transaction.interceptor.TransactionInterceptor">
		<property name="transactionManager" ref="transactionManager"/>
		<property name="transactionAttributes">
			<props>
				<prop key="get*">PROPAGATION_REQUIRED, readOnly</prop>
				<prop key="*">PROPAGATION_REQUIRED</prop>
			</props>
		</property>
	</bean> -->
			
	<!-- 	
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="get*" propagation="REQUIRED" read-only="true" timeout="30"/>
			<tx:method name="upgrade*" propagation="REQUIRES_NEW" isolation="SERIALIZABLE"/>
			<tx:method name="*" propagation="REQUIRED"/>
		</tx:attributes>		
	</tx:advice> -->
	
	<!-- transactionManager는 트랜잭션 매니저 빈 아이디가 "transactionManager"라면 생략할 수 있다. -->
	<!-- <tx:advice id="transactionAdvice">
		<tx:attributes>
			propagation이 "REQUIRED"라면 생략할 수 있다.
			<tx:method name="get*" read-only="true"/>
			<tx:method name="*"/>
		</tx:attributes>
	</tx:advice>
	
	<aop:config>
		<aop:advisor advice-ref="transactionAdvice" pointcut="bean(*Service)"/>
	</aop:config> -->
	
	<!-- Proxy를 이용하기전에 사용하던 Bean 설정 	
	<bean id="userService" class="springbook.service.UserServiceTx">
		<property name="transactionManager"  ref="transactionManager"/>
		<property name="userService" ref="userServiceImpl" />
	</bean> -->
	
	<!-- 	
	<bean id="userService" class="springbook.service.TxProxyFactoryBean">
		<property name="target"  ref="userServiceImpl"/>
		<property name="transactionManager"  ref="transactionManager"/>
		<property name="pattern" value="upgradeLevels" />
		<property name="serviceInterface" value="springbook.service.UserService" />
	</bean> -->
	
	<!-- 	
	<bean id="userService" class="org.springframework.aop.framework.ProxyFactoryBean">
		<property name="target" ref="userServiceImpl" />
		<property name="interceptorNames">
			<list>
				어드바이스와 어드바이저를 동시에 설정해줄 수 있는 프로퍼티, 리스트에 어드바이스나 어드바이저의 빈 아이디를 값으로 넣어주면 된다.
				<value>transactionAdvisor</value> 
			</list>
		</property>
	</bean> -->
	
	<!-- 	
	<bean id="userServiceImpl" class="springbook.service.UserServiceImpl">
		<property name="userDao" ref="userDao" />
		<property name="mailSender" ref="mailSender" />
	</bean> -->
	
	<bean id="userService" class="springbook.service.UserServiceImpl">
		<property name="userDao" ref="userDao" />
		<property name="mailSender" ref="mailSender" />
	</bean>
	
	<!-- 빈 후처리기 -->
	<!-- Advisor 인터페이스를 구현한 빈을 찾고 프록시 선정대상이라면 프록시를 만들어 원래 빈 오브젝트와 바꿔치기함. -->
	<!-- <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" /> -->
	
	<!-- parent="userService:프로퍼티의 정의를 포함해서 userService 빈의 설정을 상속받는다." -->
	<!-- $기호는 스태틱 멤버 클래스를 지정할 때 사용 -->
	<bean id="testUserService" class="springbook.service.UserServiceImpl$TestUserService" parent="userService"/>


	<!-- 내장형 DB 등록 -->
	<jdbc:embedded-database id="embeddedDatabase" type="HSQL">
		<jdbc:script location="classpath:springbook/service/sql/schema.sql"/>
	</jdbc:embedded-database>
	
</beans>
